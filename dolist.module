<?php
/**
 * Implements hook_menu().
 */
function dolist_menu() {
 
  $items['admin/config/services/dolist'] = array(
    'title' => 'Dolist',
    'description' => 'Manage Dolist Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dolist_global_settings_form'),
    'access arguments' => array('administer dolist'),
    'file' => 'dolist.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
 
  $items['admin/config/services/dolist/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
 return $items;
}
//hook_token_info 
//Création des tokens des champs Dolist
function dolist_token_info() {
	$info['types']['dolist'] = array( // define main group
			'name' => t('Dolist group for tokens'),
			'description' => t('Custom Group'),
	);

	// Url du contrat wsdl
	$proxywsdl = "http://api.dolist.net/V2/AuthenticationService.svc?wsdl";
	$location = "http://api.dolist.net/V2/AuthenticationService.svc/soap1.1";
	
	// Génération du proxy
	$client = new SoapClient($proxywsdl, array('trace' => 1, 'location' => $location));            

	// Renseigner la clé d'authentification avec l'identifiant client
	$authenticationInfos	= array('AuthenticationKey' => variable_get('global_settings_api_key'),'AccountID' => variable_get('global_settings_account_id'));
	$authenticationRequest	= array('authenticationRequest' => $authenticationInfos);

	// Demande du jeton d'authentification
	$result = $client->GetAuthenticationToken($authenticationRequest);
	
	if (!is_null($result->GetAuthenticationTokenResult) and $result->GetAuthenticationTokenResult != '') {
		if ($result->GetAuthenticationTokenResult->Key != '') {
			/******************************************/
			/* LECTURE  DES CONTACTS */
			/******************************************/
			
			// Url du contrat wsdl
			$proxywsdlContact = "http://api.dolist.net/V2/ContactManagementService.svc?wsdl";
			$locationContact = "http://api.dolist.net/V2/ContactManagementService.svc/soap1.1";
			// Génération du proxy
			$clientContact = new SoapClient($proxywsdlContact, array('trace' => 1, 'location' => $locationContact));
			// Création du jeton
			$token = array(
				'AccountID' => variable_get('global_settings_account_id'),
				'Key' => $result->GetAuthenticationTokenResult->Key
			);
			//Les critères de recherche des contacts
			$contactFilter = array(
				'Email' => variable_get('global_settings_email_test'));
							
		
			$contactRequest = array(
				
				'Offset' => 0, //Optionnel: L'indice du 1er contact retourné. 
				'AllFields' => true, //Indique si on doit retourner tous les champs
				'Interest' => true, //Indique si les interets déclarés sont retourné par la requete
				'LastModifiedOnly' => false, //Indique si la requete doit retourner uniquement les derniers contacts modifiés
				'RequestFilter' => $contactFilter); //Optionnel		
			
			$request = array(
				'token'=> $token,
				'request'=> $contactRequest
			);
			
			// Récupération de tous les contacts
			$result = $clientContact->GetContact($request);

			if (!is_null($result->GetContactResult) and $result->GetContactResult != '')
			{
				$contacts = $result->GetContactResult->ContactList;
				$contacts = $result->GetContactResult->ContactList->ContactData->CustomFields->CustomField;
   				

   				// ICI ON AFFICHE LES CHAMPS DE LA FICHE CONTACT (MEME LES CHAMPS NON REMPLIS) SEULEMENT SI LE CONTACT EXISTE DEJA
  				foreach($contacts as $valeur)
  				{
  					/*drupal_set_message(t('field_email @f',
            		array('@f' => field_get_items('entityform', 'inscriptionsansparams', 'field_email'))));*/
  					$info['tokens']['dolist'][$valeur->Name] = array(
					'name' => t($valeur->Name),
					'description' => t("Champ !champ d'une fiche contact Dolist", array('!champ' => $valeur->CustomName)),
				);
  					
  				}
					
			
			}
			else
			{
				watchdog('dolist','Aucun contact ne peut être trouvé');
			}			
			
			
			/******************************************/
			
			
	}
		else {
		
		}
	}
	else 
	{
			watchdog('dolist','Le token authentification est null.');
	}
	
	return $info;
}

//hook_tokens
function dolist_tokens($type, $tokens, array $data = array(), array $options = array()) {
	$replacements = array();
	$sanitize = !empty($options['sanitize']);
	if ($type == 'dolist') {
		foreach ($tokens as $name => $original) {
			if (array_key_exists($name, $data)) {
				$replacements[$original] = $data[$name];
			}
		}
	}
	return $replacements;
}
?>

